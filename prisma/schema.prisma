// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  username      String?       @unique
  avatarUrl     String?
  password      String?
  role          String        @default("USER")
  createdAt     DateTime      @default(now())
  posts         Post[]
  comments      Comment[]
  commentsLiked CommentLike[]
  likes         Like[]
  accounts      Account[]
  sessions      Session[]
  userImages    UserImage[]
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model UserImage {
  id                 String   @id @default(uuid())
  imageUrl           String
  cloudinaryPublicId String
  filename           String
  isAvatar           Boolean  @default(false)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId])
  @@index([imageUrl])
}

model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String?     @unique
  description String
  content     String
  imageUrl    String
  featured    Boolean     @default(false)
  published   Boolean     @default(false)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt()
  comments    Comment[]
  likes       Like[]
  categories  Category[]
  postImages  PostImage[]
}

model PostImage {
  id                 String   @id @default(uuid())
  imageUrl           String
  cloudinaryPublicId String
  filename           String
  isPrimary          Boolean? @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  post               Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId             String

  @@unique([postId, imageUrl])
  @@index([postId])
  @@index([imageUrl])
}

model Comment {
  id        String        @id @default(uuid())
  message   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?      @relation("comment_children", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[]     @relation("comment_children")
  parentId  String?
  likes     CommentLike[]
}

model Category {
  id    String @id @unique @default(uuid())
  label String
  title String @unique
  posts Post[]
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model CommentLike {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([commentId, userId])
  @@index([commentId])
  @@index([userId])
  @@index([commentId, userId])
}
