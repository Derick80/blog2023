// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  username      String?       @unique
  avatarUrl     String?
  password      String?
  role          String        @default("USER")
  createdAt     DateTime      @default(now())
  posts         Post[]
  comments      Comment[]
  commentsLiked CommentLike[]
  likes         Like[]
  accounts      Account[]
  sessions      Session[]
  userImages    UserImage[]
  loves         Love[]
  Project       Project[]
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model UserImage {
  id                 String   @id @default(uuid())
  imageUrl           String
  cloudinaryPublicId String
  filename           String
  isAvatar           Boolean  @default(false)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId])
  @@index([imageUrl])
}

model Content {
  slug          String            @id @unique
  title         String
  author        String
  description   String
  content       String?
  datePublished String
  published     Boolean?
  categories    ContentCategory[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  loves Love[]
}

model ContentCategory {
  id        String  @id @default(uuid())
  title     String  @unique
  content   Content @relation(fields: [contentId], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  contentId String

  @@unique([contentId, title])
  @@index([contentId])
}

model Love {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  content   Content @relation(fields: [contentId], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  contentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([contentId, userId])
  @@index([contentId, userId])
  @@index([contentId])
  @@index([userId])
}

model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String?     @unique
  description String
  content     String
  imageUrl    String
  featured    Boolean     @default(false)
  published   Boolean     @default(false)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt()
  comments    Comment[]
  likes       Like[]
  categories  Category[]
  postImages  PostImage[]
}

model PostImage {
  id                 String   @id @default(uuid())
  imageUrl           String
  cloudinaryPublicId String
  filename           String
  isPrimary          Boolean? @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  post               Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId             String

  @@unique([postId, imageUrl])
  @@index([postId])
  @@index([imageUrl])
}

model Comment {
  id        String        @id @default(uuid())
  message   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?      @relation("comment_children", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[]     @relation("comment_children")
  parentId  String?
  likes     CommentLike[]
}

model Category {
  id    String @id @unique @default(uuid())
  label String
  title String @unique
  posts Post[]
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model CommentLike {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([commentId, userId])
  @@index([commentId])
  @@index([userId])
  @@index([commentId, userId])
}

// resume schema

model Resume {
  id                     String                   @id @default(cuid())
  title                  String                   @unique
  phoneNumber            Int
  email                  String
  website                String
  location               String
  // (City, State, ZIP)
  summary                String
  professionalExperience ProfessionalExperience[]
  education              Education[]
  skills                 JobSkill[]
  publications           Publication[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
}

model JobSkill {
  id        String   @id @default(cuid())
  skill     String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resumeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfessionalExperience {
  id        String   @id @default(cuid())
  title     String
  company   String
  location  String
  startDate String
  endDate   String
  duties    Duties[]
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resumeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Duties {
  id                       String                 @id @default(cuid())
  description              String
  professionalExperience   ProfessionalExperience @relation(fields: [professionalExperienceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  professionalExperienceId String
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
}

model Education {
  id          String      @id @default(cuid())
  institution String
  degree      String
  field       String
  duties      eduDuties[]
  startDate   String
  endDate     String
  resume      Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resumeId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model eduDuties {
  id          String    @id @default(cuid())
  description String
  education   Education @relation(fields: [educationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  educationId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Publication {
  id       String  @id @default(cuid())
  title    String
  year     String
  journal  String
  authors  String
  edition  String
  type     String
  url      String
  pdf      String?
  Resume   Resume? @relation(fields: [resumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resumeId String?
}

// end resume schema

// start project schema
model Project {
  id               String            @id @unique @default(uuid())
  title            String
  description      String
  primaryImage     String?
  projectImages    ProjectImage[]
  projectUrl       String
  githubUrl        String
  status           String            @default("In Progress")
  technologyStacks TechnologyStack[]
  features         projectFeatures[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt()
  User             User?             @relation(fields: [userId], references: [id])
  userId           String?

  @@index([title])
  @@index([id])
}

model projectFeatures {
  id        String   @id @unique @default(uuid())
  value     String   @unique
  projects  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TechnologyStack {
  id        String    @id @unique @default(uuid())
  value     String    @unique
  url       String
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProjectImage {
  id                 String   @id @default(uuid())
  imageUrl           String
  cloudinaryPublicId String
  filename           String?
  isPrimary          Boolean? @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId          String

  @@unique([projectId, imageUrl])
  @@index([projectId])
  @@index([imageUrl])
}

// end project schema
