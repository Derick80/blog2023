// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  avatarUrl String?
  password String?
  profile Profile?
  posts Post[]
  comments Comment[]
  likes Like[]
  chats Chat[]
  messages Message[]
  accounts Account[]
  tokens Token[]
  notes Note[]  
  favorites Favorite[]
  projects Project[]
  commentsLiked CommentLike[]
  votes Vote[]
  blocked Block[]

}

model Block {
  id String @id @default(cuid())
  blocked Boolean @default(false)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}
model Note {
  id String @id @default(cuid())
  title String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Post {
  id String @id @default(cuid())
  title String
  slug String @unique
  description String
  content String
  imageUrl String
  featured Boolean @default(false)
  published Boolean @default(false)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  comments Comment[]
  likes Like[]
  favorites Favorite[]
  categories Category[]
}

model Comment {
    id        String    @id @default(uuid())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?  @relation("comment_children", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("comment_children")
  parentId  String?
  likes     CommentLike[]
}

model Category {
  id       String    @id @unique @default(uuid())
  label    String
  value    String    @unique
  posts    Post[]
  projects Project[]

}


model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}
model Favorite {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model CommentLike {
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String  
  comment  Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([commentId, userId])
  @@index([commentId])
  @@index([userId])
  @@index([commentId, userId])
}


model Profile {
  id             String   @id @unique @default(uuid())
  firstName      String
  lastName       String
  bio            String
  location       String
  education      String
  occupation     String
  employer       String
  profilePicture String   @default("https://res.cloudinary.com/dch-photo/image/upload/v1672092441/stock/image_FILL0_wght400_GRAD0_opsz48_loo0xo.png")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String  @unique
  email          String
}
model Project {
  id          String     @id @unique @default(uuid())
  title       String
  description String
  projectImg  String
  projectUrl  String
  githubUrl   String
  createdAt   DateTime   @default(now())
  categories  Category[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
}
model Token {
  id        String    @id @default(cuid())
  token     String
  type      TokenType
  expiresAt DateTime?
  sentTo    String?
  usedAt    DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([token, type])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}


model Chat {
  id String @id @default(cuid())
 createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users User[]
  messages Message[]
}

model Message {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId String
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_EMAIL
  RESET_PASSWORD
}

model Poll {
    id String @id @default(cuid())
    title String
    description String
    options Option[]
    votes Vote[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    completed Boolean @default(false)

}

model Option{
    id String @id @default(cuid())
    value String
    poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    pollId String
    votes Vote[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Vote {
    id String @id @default(cuid())
    option Option @relation(fields: [optionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    optionId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String
    poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    pollId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}