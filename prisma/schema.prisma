// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  username      String?       @unique
  avatarUrl     String?
  password      String?
  role          String        @default("USER")
  profile       Profile?
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  accounts      Account[]
  tokens        Token[]
  favorites     Favorite[]
  projects      Project[]
  commentsLiked CommentLike[]
  blocked       Block[]
  followers     Follow[]      @relation("UserFollowers")
  following     Follow[]      @relation("UserFollowing")
  sessions      Session[]
  userImages    UserImage[]
}

model Follow {
  id          String @id @default(cuid())
  followerId  String // ID of the user who follows
  followingId String // ID of the user being followed
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id])
  following   User   @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model UserImage {
  id                 String   @id @default(uuid())
  imageUrl           String
  cloudinaryPublicId String
  filename           String?
  isPrimary          Boolean? @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String

  @@unique([userId, imageUrl])
  @@index([userId])
  @@index([imageUrl])
}

model Block {
  id      String  @id @default(cuid())
  blocked Boolean @default(false)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String  @unique
}

model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String?     @unique
  description String
  content     String
  imageUrl    String
  featured    Boolean     @default(false)
  published   Boolean     @default(false)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt()
  comments    Comment[]
  likes       Like[]
  favorites   Favorite[]
  categories  Category[]
  postImages  PostImage[]
}

model PostImage {
  id                 String   @id @default(uuid())
  imageUrl           String
  cloudinaryPublicId String
  filename           String?
  isPrimary          Boolean? @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  post               Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId             String

  @@unique([postId, imageUrl])
  @@index([postId])
  @@index([imageUrl])
}

model Comment {
  id        String        @id @default(uuid())
  message   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?      @relation("comment_children", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[]     @relation("comment_children")
  parentId  String?
  likes     CommentLike[]
}

model Category {
  id    String @id @unique @default(uuid())
  label String
  value String @unique
  posts Post[]
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Favorite {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model CommentLike {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([commentId, userId])
  @@index([commentId])
  @@index([userId])
  @@index([commentId, userId])
}

model Profile {
  id             String         @id @unique @default(uuid())
  firstName      String
  lastName       String
  bio            String
  location       String
  education      String
  occupation     String
  employer       String
  profilePicture String         @default("https://res.cloudinary.com/dch-photo/image/upload/v1672092441/stock/image_FILL0_wght400_GRAD0_opsz48_loo0xo.png")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String         @unique
  email          String
  socials        Socials?
  profileImages  ProfileImage[]
}

model ProfileImage {
  id                 String   @id @default(uuid())
  imageUrl           String
  cloudinaryPublicId String
  filename           String?
  isPrimary          Boolean? @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  profile            Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId          String

  @@unique([profileId, imageUrl])
  @@index([profileId])
  @@index([imageUrl])
}

model Socials {
  id        String   @id @unique @default(uuid())
  twitter   String?
  linkedin  String?
  instagram String?
  github    String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @unique
}

model Project {
  id               String            @id @unique @default(uuid())
  title            String
  description      String
  primaryImage     String?
  projectImages    ProjectImage[]
  projectUrl       String
  githubUrl        String
  status           String            @default("In Progress")
  technologyStacks TechnologyStack[]
  features         String[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt()

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model TechnologyStack {
  id        String   @id @unique @default(uuid())
  value     String   @unique
  url       String
  projects  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectImage {
  id                 String   @id @default(uuid())
  imageUrl           String
  cloudinaryPublicId String
  filename           String?
  isPrimary          Boolean? @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId          String

  @@unique([projectId, imageUrl])
  @@index([projectId])
  @@index([imageUrl])
}

model Token {
  id        String    @id @default(cuid())
  token     String
  type      TokenType
  expiresAt DateTime?
  sentTo    String?
  usedAt    DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([token, type])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_EMAIL
  RESET_PASSWORD
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Totp {
  // The encrypted data used to generate the OTP.
  hash String @unique

  // The status of the TOTP.
  // Used internally / programmatically to invalidate TOTPs.
  active Boolean

  // The input attempts of the TOTP.
  // Used internally to invalidate TOTPs after a certain amount of attempts.
  attempts Int

  // The expiration date of the TOTP.
  // Used programmatically to invalidate unused TOTPs.
  expiresAt DateTime

  // Index for expiresAt
  @@index([expiresAt])
}

model Resume {
  id                     String                   @id @default(cuid())
  title                  String
  phoneNumber            String
  email                  String
  website                String
  location               String
  // (City, State, ZIP)
  summary                String
  professionalExperience ProfessionalExperience[]
  education              Education[]
  sills                  String[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
}

model ProfessionalExperience {
  id        String   @id @default(cuid())
  title     String
  company   String
  location  String
  startDate String
  endDate   String
  duties    Duties[]
  resume    Resume   @relation(fields: [resumeId], references: [id])
  resumeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Duties {
  id                       String                 @id @default(cuid())
  description              String
  professionalExperience   ProfessionalExperience @relation(fields: [professionalExperienceId], references: [id])
  professionalExperienceId String
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
}

model Education {
  id          String   @id @default(cuid())
  institution String
  degree      String
  field       String
  startDate   String
  endDate     String
  resume      Resume   @relation(fields: [resumeId], references: [id])
  resumeId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
